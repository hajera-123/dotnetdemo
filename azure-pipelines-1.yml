

trigger:
- main
- master
- develop
- feature/*

pool:
  vmImage: ubuntu-latest

variables:
  buildplatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifaceName: drop
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/head/main')]
  
stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'BuildClient'
    displayName: 'Build job'
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: Npm@1
      displayName: 'Restore Angular Dependencies'
      inputs:
        command: install
        workingDir: 'ClientApp'
        verbose: false
    
    
    - task: Npm@1 
      displayName: 'Build Angular'
      inputs:
        command: custom
        workingDir: 'ClientApp'
        verbose: false
        customcommand: 'run build --prod'
    
    
    - task: Npm@1
      displayName: 'Test UI'
      inputs:
        command: custom
        workingDir: 'ClientApp'
        verbose: false
        customcommand: 'run test --watch=false'
    
     # Middle Layer
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildconfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildconfiguration)'
        projects: '**/*.csproj'
        
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildconfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildconfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: $(artifaceName)
      
      
      
    - task: 'DeployDev'
      displayName: 'Deploy to Dev'
      # condition: and(succeeded(), eq(variables.isMain, 'true')
      variables:
        appName: 'Hajera-RG-Test'
      jobs:
      - deployment: 'Hajeradev'
      
        environment: 'Dev'
        strategy:
           runOnce:
            deploy:
              steps:
              - task: AzureRmWebappDeployment@4
                inputs:
                  connectionType: 'azureRM'
                  azureSubscription: 'Azure subscription 1'
                  appType: 'webAppLinux'
                  WebAppName: $(appName)
                  packageForLinux: '$(Pipeline.Workspace)/$(artifaceName)/$(buildConfiguration)/*.zip'
    
